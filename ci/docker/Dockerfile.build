FROM ubuntu:24.04

# Metadata
LABEL org.opencontainers.image.title="SDRR Build Environment"
LABEL org.opencontainers.image.description="Multi-platform build environment for SDRR firmware and host tooling"
LABEL org.opencontainers.image.authors="Piers Finlayson <piers@piers.rocks>"
LABEL org.opencontainers.image.url="https://piers.rocks"
LABEL org.opencontainers.image.source="https://github.com/piersfinlayson/software-defined-retro-rom"
LABEL org.opencontainers.image.licenses="MIT"
LABEL org.opencontainers.image.vendor="piers.rocks"

# Build-time metadata (populated by CI/build scripts)
ARG BUILD_DATE
ARG VERSION
ARG VCS_REF
LABEL org.opencontainers.image.created=${BUILD_DATE}
LABEL org.opencontainers.image.version=${VERSION}
LABEL org.opencontainers.image.revision=${VCS_REF}

# Multiplatform support
ARG BUILDPLATFORM
ARG TARGETPLATFORM
ARG TARGETARCH

# Install base dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    libcurl4-openssl-dev \
    libjson-c-dev \
    libzip-dev \
    sudo \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Download ARM toolchain based on target platform
# See https://developer.arm.com/downloads/-/arm-gnu-toolchain-downloads
ARG ARM_GCC_VERSION=14.2.rel1
RUN case "${TARGETPLATFORM}" in \
    "linux/amd64") \
        ARCH_SUFFIX="x86_64" ;; \
    "linux/arm64") \
        ARCH_SUFFIX="aarch64" ;; \
    "linux/arm/v7") \
        ARCH_SUFFIX="x86_64" ;; \
    *) \
        echo "Unsupported platform: ${TARGETPLATFORM}" && exit 1 ;; \
    esac && \
    wget https://developer.arm.com/-/media/Files/downloads/gnu/${ARM_GCC_VERSION}/binrel/arm-gnu-toolchain-${ARM_GCC_VERSION}-${ARCH_SUFFIX}-arm-none-eabi.tar.xz && \
    tar -xf arm-gnu-toolchain-${ARM_GCC_VERSION}-${ARCH_SUFFIX}-arm-none-eabi.tar.xz && \
    mv arm-gnu-toolchain-${ARM_GCC_VERSION}-${ARCH_SUFFIX}-arm-none-eabi /opt/ && \
    rm arm-gnu-toolchain-${ARM_GCC_VERSION}-${ARCH_SUFFIX}-arm-none-eabi.tar.xz && \
    ln -s /opt/arm-gnu-toolchain-${ARM_GCC_VERSION}-${ARCH_SUFFIX}-arm-none-eabi /opt/arm-toolchain

# Create build user
RUN useradd -m -s /bin/bash build

# Switch to build user
USER build
WORKDIR /home/build

# Set TOOLCHAIN environment variable
ENV TOOLCHAIN="/opt/arm-toolchain/bin"

# Install Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/home/build/.cargo/bin:${PATH}"

# Install probe-rs
RUN curl --proto '=https' --tlsv1.2 -LsSf https://github.com/probe-rs/probe-rs/releases/latest/download/probe-rs-tools-installer.sh | sh

# Create output directory
RUN mkdir -p /home/build/output

WORKDIR /home/build
VOLUME ["/home/build/output"]
